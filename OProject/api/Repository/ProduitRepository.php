<?php
namespace Api\Repository;
use Api\Model\Produit;
use Api\Common\DbConnector;
class ProduitRepository implements Repository{
    private $dbConnector;
    public function __construct (){
        //TODO: Autogenerated stub. You can do something like $dbConnector = DbConnector::getInstance();
        $this->dbConnector = DbConnector::getInstance();
    }
    public function findAll(){
        $stmt = $this->dbConnector->pdo->prepare('SELECT id, libelle, prix FROM produit');
        $stmt->execute();
        $stmt->setFetchMode(\PDO::FETCH_ASSOC);
        $result = $stmt->fetchAll();
        return $result;
    }
    public function findOne($id=0){
        $stmt = $this->dbConnector->pdo->prepare('SELECT id, libelle, prix FROM produit  WHERE id = :id');
         $stmt->bindParam(':id', $id, \PDO::PARAM_INT);
        $stmt->execute();
        $stmt->setFetchMode(\PDO::FETCH_ASSOC);
        $result = $stmt->fetch();
        return $result;
    }
    public function save($object=[]){
        $stmt = $this->dbConnector->pdo->prepare('INSERT INTO produit(`libelle`, `prix`)  VALUES (:libelle, :prix)');
        $stmt->bindParam('libelle', $object->libelle, \PDO::PARAM_STR);
        $stmt->bindParam('prix', $object->prix, \PDO::PARAM_STR);
        $stmt->execute();
        return $this->dbConnector->pdo->lastInsertId();
    }
    public function update($object=[]){
        $stmt = $this->dbConnector->pdo->prepare('UPDATE produit SET  libelle = :libelle,  prix = :prix WHERE id = :id');
         $stmt->bindParam(':id', $object->id, \PDO::PARAM_INT);
        $stmt->bindParam('libelle', $object->libelle, \PDO::PARAM_STR);
        $stmt->bindParam('prix', $object->prix, \PDO::PARAM_STR);
        $stmt->execute();
        return $stmt->rowCount();
    }
    public function delete($id=0){
        $stmt = $this->dbConnector->pdo->prepare('DELETE FROM produit  WHERE id = :id');
         $stmt->bindParam(':id', $id, \PDO::PARAM_INT);
        $stmt->execute();
        return $stmt->rowCount();
    }
}
